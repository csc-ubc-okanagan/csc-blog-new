[{"content":"You can use base Python to perform basic visualizations with a dataset. Let\u0026rsquo;s take a look at a few examples.\nLet’s re-load in our Gapminder data:\n1 2 3 import pandas as pd url = \u0026#39;https://raw.githubusercontent.com/jstaf/gapminder/master/gapminder/gapminder.csv\u0026#39; df = pd.read_csv(url) 1 2 import matplotlib.pyplot as plt plt.scatter(x = df[\u0026#39;year\u0026#39;], y = df[\u0026#39;pop\u0026#39;]) 1 2 df_AF = df[df[\u0026#39;continent\u0026#39;] == \u0026#39;Africa\u0026#39;] df_AF.head() 1 2 3 4 5 6 ## country continent year lifeExp pop gdpPercap ## 24 Algeria Africa 1952 43.077 9279525 2449.008185 ## 25 Algeria Africa 1957 45.685 10270856 3013.976023 ## 26 Algeria Africa 1962 48.303 11000948 2550.816880 ## 27 Algeria Africa 1967 51.407 12760499 3246.991771 ## 28 Algeria Africa 1972 54.518 14760787 4182.663766 1 plt.scatter(x = df_AF[\u0026#39;year\u0026#39;], y = df_AF[\u0026#39;pop\u0026#39;]) Base Python works well for simple visualizations, but Altair is a package that helps to create personalized and detailed visualizations to suit any task. See the article titled \u0026lsquo;Visualizing with Altair in Python\u0026rsquo; to learn more about it.\n","date":"2023-06-15T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/basic-visualizations-in-python/","title":"Basic Visualizations in Python"},{"content":"Functions take in data and do things with that data. We can write our own functions, but generally in Python we’ll be using functions that have already been written or built.\nSimple functions can be in base Python or in different packages. Take these base Python functions for example:\n1 sum((1,1)) 1 ## 2 1 max([1, 2, 5, 8, 3]) 1 ## 8 Calling a function requires 2 things: the function itself and any arguments the function allows us to specify – one of these arguments is the data source, but there are usually other parameters we can specify.\nIf we want to understand how the built-in functions work, let’s define our own function for addition. We start by naming it, and then defining the arguments. Here, let\u0026rsquo;s call it \u0026lsquo;add\u0026rsquo; and it will take in two numbers, so we set the arbitrary names of these arguments to x and y.\n1 2 3 4 5 def add(x,y): answer = x + y return answer add(1,1) 1 ## 2 This is cool, but unnecessary work. It’s much easier to use the built-in function that we use above. This is why packages are so useful. Other people have spent time defining functions to do typical tasks, so we can use the existing work rather than duplicating effort.\nNote that there may be limitations or unexpected behaviours to a function. What would happen if we added x+y in this function?\n1 add(\u0026#39;x\u0026#39;,\u0026#39;y\u0026#39;) 1 ## \u0026#39;xy\u0026#39; This is something to consider when creating functions! It may not always be used for its intended use.\nIf we wanted to create a function to reverse a number, we could do that first by defining the name of our function, as well as how many arguments it requires. At the end, a function will need to do something either by using the command return or print or something else, otherwise it serves no purpose.\nWith this function, if we input the number 12345, we would expect it to return 54321.\n1 2 3 4 5 6 7 8 9 10 def reverse_num(number): num = number reversed_num = 0 while num != 0: digit = num % 10 reversed_num = reversed_num * 10 + digit num //= 10 print(\u0026#34;Reversed Number: \u0026#34; + str(reversed_num)) reverse_num(12345) 1 ## Reversed Number: 54321 It works! Can you think of any limitations or unexpected uses for this function?\n","date":"2023-06-15T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/defining-functions-in-python/","title":"Defining Functions in Python"},{"content":"A dictionary lists key-value pairs, which could also be thought of as associated values where a key matches to the associated value. Let\u0026rsquo;s look at a few examples.\n1 2 3 # Dictionary - mapping between values house = {\u0026#39;bedrooms\u0026#39;: 3, \u0026#39;bathrooms\u0026#39;: 2, \u0026#39;city\u0026#39;: \u0026#39;Kelowna\u0026#39;, \u0026#39;price\u0026#39;: 250000} 1 house[\u0026#39;price\u0026#39;] 1 ## 250000 1 2 course = {\u0026#39;Data Science\u0026#39;: [\u0026#39;DATA100\u0026#39;, \u0026#39;DATA200\u0026#39;, \u0026#39;DATA300\u0026#39;], \u0026#39;Science\u0026#39;: [\u0026#39;SCIENCE100\u0026#39;, \u0026#39;SCIENCE200\u0026#39;, \u0026#39;SCIENCE300\u0026#39;]} 1 course[\u0026#39;Data Science\u0026#39;] 1 ## [\u0026#39;DATA100\u0026#39;, \u0026#39;DATA200\u0026#39;, \u0026#39;DATA300\u0026#39;] What if we wanted to turn the following information into a dictionary.\nName ID Campus Courses Dan 12345678 Okanagan DATA100, ENGL100, HIST100, CHEM100 This is how we would do this:\n1 2 3 4 5 student = {\u0026#39;Name\u0026#39; : \u0026#39;Dan\u0026#39;, \u0026#39;ID\u0026#39; : 12345678, \u0026#39;Campus\u0026#39; : \u0026#39;Okanagan\u0026#39;, \u0026#39;Courses\u0026#39;: [\u0026#39;DATA100\u0026#39;, \u0026#39;ENGL100\u0026#39;, \u0026#39;HIST100\u0026#39;, \u0026#39;CHEM100\u0026#39;]} student 1 ## {\u0026#39;Name\u0026#39;: \u0026#39;Dan\u0026#39;, \u0026#39;ID\u0026#39;: 12345678, \u0026#39;Campus\u0026#39;: \u0026#39;Okanagan\u0026#39;, \u0026#39;Courses\u0026#39;: [\u0026#39;DATA100\u0026#39;, \u0026#39;ENGL100\u0026#39;, \u0026#39;HIST100\u0026#39;, \u0026#39;CHEM100\u0026#39;]} ","date":"2023-06-15T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/dictionaries-in-python/","title":"Dictionaries in Python"},{"content":"Lists are an important tool used in Python. Lists can contain elements of mixed types as well. Let\u0026rsquo;s look at a few examples.\n1 2 3 # List list1 = [] list1 1 ## [] 1 2 list2 = [1, \u0026#39;UBC\u0026#39;, 100] list2 1 ## [1, \u0026#39;UBC\u0026#39;, 100] Now let\u0026rsquo;s see a few operations we can perform on a list.\n1 len(list1) 1 ## 0 1 len(list2) 1 ## 3 1 2 # Indexing Example - we will talk more about this later on list2[2] 1 ## 100 Note - Python indexing starts at zero, so the first element in the list is 0, the second is 1, and the third is 2, so if we actually wanted the second element, we would have to do this:\n1 list2[1] 1 ## \u0026#39;UBC\u0026#39; 1 type(list2) 1 ## \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; 1 type(list2[1]) 1 ## \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; As we mentioned earlier, a main difference between lists and tuples is that lists are mutable. Mutable means that elements in a list can be appended, changed, or deleted.\n1 2 3 mixed_list = [1, \u0026#39;UBC\u0026#39;, 5.0, \u0026#39;1\u0026#39;] mixed_list.append(\u0026#39;New\u0026#39;) mixed_list 1 ## [1, \u0026#39;UBC\u0026#39;, 5.0, \u0026#39;1\u0026#39;, \u0026#39;New\u0026#39;] If we decided that we wanted to replace \u0026lsquo;New\u0026rsquo; with 4, we could do so like this:\n1 2 mixed_list[4]= 4 mixed_list 1 ## [1, \u0026#39;UBC\u0026#39;, 5.0, \u0026#39;1\u0026#39;, 4] If we wanted to remove elements from the list, we could do so like this:\n1 2 mixed_list.remove(\u0026#39;UBC\u0026#39;) mixed_list 1 ## [1, 5.0, \u0026#39;1\u0026#39;, 4] Note that this will only remove the first occurrence, if this happened to be in the list more than once. It would also call an error message if the element doesn\u0026rsquo;t exist.\nIf we wanted to remove it based on the index of the list:\n1 2 del mixed_list[0] mixed_list 1 ## [5.0, \u0026#39;1\u0026#39;, 4] ","date":"2023-06-15T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/lists-in-python/","title":"Lists in Python"},{"content":"Loops are a common tool used in Python to help users iterate through lists, or perform the same operation numerous times without added efforts.\nLet\u0026rsquo;s look at a few examples:\n1 2 3 4 5 # Loops for n in [0, 1, 5, 2, -5]: # this is inside the loop print(\u0026#34;The number is\u0026#34;, n, \u0026#34;and its squared value is\u0026#34;, n**2) 1 2 3 4 5 ## The number is 0 and its squared value is 0 ## The number is 1 and its squared value is 1 ## The number is 5 and its squared value is 25 ## The number is 2 and its squared value is 4 ## The number is -5 and its squared value is 25 1 # this is outside the loop 1 2 3 4 ## Loop s = \u0026#34;Python\u0026#34; for c in s: print(c + \u0026#34;!\u0026#34;) 1 2 3 4 5 6 ## P! ## y! ## t! ## h! ## o! ## n! 1 2 3 # range(10) sets values 0-9, because recall Python starts at 0, not 1 for i in range(10): print(i) 1 2 3 4 5 6 7 8 9 10 ## 0 ## 1 ## 2 ## 3 ## 4 ## 5 ## 6 ## 7 ## 8 ## 9 This is equivalent to writing:\n1 2 for i in range(0,10): print(i) 1 2 3 4 5 6 7 8 9 10 ## 0 ## 1 ## 2 ## 3 ## 4 ## 5 ## 6 ## 7 ## 8 ## 9 If we wanted it to start at 1 and go to 10 (inclusive), we would write:\n1 2 for i in range(1,11): print(i) 1 2 3 4 5 6 7 8 9 10 ## 1 ## 2 ## 3 ## 4 ## 5 ## 6 ## 7 ## 8 ## 9 ## 10 Other examples:\n1 2 3 #(start,end,increments) for i in range(0,101,10): print(i) 1 2 3 4 5 6 7 8 9 10 11 ## 0 ## 10 ## 20 ## 30 ## 40 ## 50 ## 60 ## 70 ## 80 ## 90 ## 100 1 2 3 4 n = 3 while n \u0026gt; 0: print(n) n = n - 1 1 2 3 ## 3 ## 2 ## 1 1 print(\u0026#34;Smile!\u0026#34;) 1 ## Smile! ","date":"2023-06-15T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/loops-in-python/","title":"Loops in Python"},{"content":"Since Python is so widely used, there are many people who contribute to continuously improving and developing it. Let’s imagine Python as a base version. It can do basic calculations, but it requires extra efforts to do more complicated things. People have created extras or add-ons to help create shortcuts for more complicated specific tasks or functions. These ‘add-ons’ are called modules. A module allows us to use already defined classes, functions, variables, and more. Packages are a collection of similar modules. These modules are stored together in a package to help with storage and ease of use.\nPackages can be imported to use to help make things easier. For example, there is a Python package called math that helps with basic mathematical operations.\nTo use a package or specific module within it, we use the import command. The format of these commands is as followed:\nimport package.subpackage.modulename\nWe can also nickname the packages to make it easier when we use them. This is done using the as statement. An example of this is import pandas as pd. By doing this, whenever a function from pandas is used, instead of having to type pandas.function_name, we can type pd.function_name. This may not seem like a big difference, but when it is used repeatedly, this can save a lot of time and effort.\nA few of the main packages used in python include:\nPackage Name Usage Standard Import Command NumPy Used for arrays, matricies and mathematical functions import numpy as np pandas Used with data frames import pandas as pd matplotlib Typically used for plotting functions from matplotlib import pyplot as plt altair More advanced plotting options import altair as alt SciPy Used for scientific and technical computing import scipy There are many other packages available, and you can even create your own as well! To see a list of the top packages available in Python, visit this link.\n","date":"2023-06-15T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/packages-in-python/","title":"Packages in Python"},{"content":"R can be used as a generic calculator.\n1 1 + 1 1 ## [1] 2 1 2-3 1 ## [1] -1 1 6 / 2 1 ## [1] 3 1 3 * 4 1 ## [1] 12 Since R is so widely used, there are many people who contribute to continuously improving and developing it. Without anything added, R is a base version. It can do basic calculations, but it requires extra efforts to do more complicated things. People have created extras or add-ons to help create shortcuts for more complicated specific tasks or functions. These \u0026lsquo;add-ons\u0026rsquo; are called packages. Packages can be imported to use to help make things easier. For example, there is a large package in R called tidyverse that is very popular.\nFirst, packages must be installed, and then they have to be called. To install a package, use the command install.packages('package_name'). To call a package, use the command library(package_name). This is one example below:\n1 2 #install.packages(\u0026#39;matlib\u0026#39;) library(matlib) Once a package has been called, it does not need to be called again for the rest of this document. You can also import multiple packages within the same document. We will get into more useful packages later on!\nFor now, practice typing basic calculations into your R terminal to get used to the syntax, and see how easy it is to calculate things!\n","date":"2023-06-14T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/introduction-to-r/","title":"Introduction to R"},{"content":"Jupyter Notebook is a web-based interactive computing platform, and it can be used for many things, aside from Python. You can even use both R and Python within the same document.\nThink of Python (or R) as the language you are writing in, and Jupyter as the pen and pencil. This is how Python and Jupyter are used together.\nNote: There are many different IDEs (integrated development environment) for Python. To name a few, Programiz, Atom, Visual Studio Code, Spyder, and many more. If a Jupyter install is causing trouble, or if you do not like the interface and want something similar to R Studio, Spyder is a good option because it is a very familiar interface for R Studio users. Programiz is also great because it doesn\u0026rsquo;t require an install.\nSyzygy Syzygy (pronunciation up for debate) is a great way to use Jupyter without having to download it to your local computer. However, it does require your UBC login to use. It also can access your local files as well as UBC OneDrive files. To use, simply follow this link, click the sign on button in the top right, and use your UBC login to sign in. You will be able to creat files, view existing files, and enjoy all of the functionalities that Jupyter has to offer.\nDownloading Jupyter If you prefer to download Jupyter, it can be done with Anaconda. This video is a great resource explaining how to download both Jupyter and Anaconda, as well as how to get started using Jupyter.\nAlternatively, you can follow the instructions on this webpage to do the same install. Note that it has slightly different instructions for Windows and Mac users.\n","date":"2023-06-05T18:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/jupyter-notebook/","title":"Jupyter Notebook"},{"content":"CSV File Using the Pandas library, it is very easy to open a CSV file using Python. Simply import the package, and then use the line pd.read_csv(). See this example below:\n1 2 import pandas as pd df = pd.read_csv(\u0026#34;file.csv\u0026#34;) Note that this assumes the file you want to open follows the same filepath as your current directory. If you wanted to use a file in a different directory, simply use pd.read_csv(\u0026quot;/Users/name/rest_of_filepath/file.csv\u0026quot;) instead.\nAlternatively, if you were to use base Python, it gets a bit more complicated. Using the CSV library, it would have to be done by iterating through each row in the file. Printing each row would look like this:\n1 2 3 4 5 import csv with open(\u0026#34;file.csv\u0026#34;, \u0026#39;r\u0026#39;) as file: csvreader = csv.reader(file) for row in csvreader: print(row) 1 2 3 4 5 ## [\u0026#39;12\\t12\u0026#39;] ## [\u0026#39;34\\t1\u0026#39;] ## [\u0026#39;1\\t1\u0026#39;] ## [\u0026#39;1\\t1\u0026#39;] ## [\u0026#39;1\\t1\u0026#39;] Text File Similarly, for a text file, we can use Pandas to simplify the process. We can use the line pd.read_fwf() to read in a .txt file. For reference, FWF stands for fixed width lines which allows the lengths and features of the file to be specified as fixed values so that it can be read in to Python systematically. See this example below:\n1 2 import pandas as pd df = pd.read_fwf(\u0026#39;file.txt\u0026#39;) Alternatively, you can also iterate through each row similar to the csv format mentioned above, but we will not go through that. If you would like to try it as an exercise, simply use the second method above in the CSV section and change the file formatting to fit a .txt file.\nURL You can also access data on the internet without having to save a local copy. Take this website for example: Gapminder Data\nIf you follow the link, you will see that it is simply a CSV file with no other formatting or permissions to enter. If we wanted to read this into our Python script, we could do it like this:\n1 2 3 import pandas as pd url = \u0026#39;https://raw.githubusercontent.com/jstaf/gapminder/master/gapminder/gapminder.csv\u0026#39; df = pd.read_csv(url) There are many other file formats and ways to load files into Python. There are great resources online for any other file formats, but these examples above should get you started.\n","date":"2023-06-05T11:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/reading-data-in-python/","title":"Reading Data in Python"},{"content":" It is good practice to have descriptive but concise file names so one can easily find the code they are looking for. But as projects grow, the number of scripts can become quite large (unless you are one of those chaotic people that put everything in a single script\u0026hellip;). With UNIX computers, one can easily search for code in the a file explorer window, but this does not work with Windows. It is possible to search for files by name, but it is not possible to search for specific content in R scripts.\nThe findR package allows Windows users to search for specific strings of code within directories using a simple syntax:\n1 2 3 4 library(\u0026#39;findR\u0026#39;) findRscript(pattern = \u0026#39;a string of code\u0026#39;, path = \u0026#39;my-folder\u0026#39;, case.sensitive = TRUE) The pattern argument can be any code string, but note that single and double quotes need to be escaped by placing a \\ before them (i.e., \\' and \\\u0026quot;), while some special characters need to be preceeded by \\\\, such as +, (. Failing to escape and double-escape special characters will cause the function to miss the files or fail:\n1 findRscript(\u0026#39;library(\\\u0026#39;ctmm\\\u0026#39;)\u0026#39;, path = \u0026#39;H:/GitHub/env-var-review/analysis\u0026#39;) 1 ## No R scripts found! 1 findRscript(\u0026#39;library\\\\(\\\u0026#39;ctmm\\\u0026#39;\\\\)\u0026#39;, path = \u0026#39;H:/GitHub/env-var-review/analysis\u0026#39;) 1 ## No R scripts found! The package can also search for R Markdown files, PDFs, and text (.txt) files via the findRmd(), findPDF(), and findtxt() functions, respectively. Each of the functions can also copy the files that matched the pattern argument to a new folder (if copy = TRUE, but it is FALSE by default). You can decide which folder the files get copied to using the folder argument. Note that by default overwrite is set to TRUE, so any files present with the same name will be overwritten.\n","date":"2023-03-09T18:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/searching-for-files-with-the-findr-package/","title":"Searching for files with the `findR` package"},{"content":"\\usepackage{amsmath}\nThere are many different data structure types in R, each with varying levels of complexity and uses. The simplest data structure in R is a vector. Vectors are one-dimensional arrays (i.e., sets of values) of a single class (such as characters, numbers, dates, etc.), and they have a similar structure to the mathematical concept of vectors. For example, the vector $\\vec v$ with values 1, 4, 6, 2 would be:\n$$\\vec v = \\begin{bmatrix}1 \\\\ 4 \\\\ 6 \\\\ 2\\end{bmatrix}.$$In R we can create vectors using the c() function, as follows:\n1 2 v \u0026lt;- c(1, 4, 6, 2) v 1 ## [1] 1 4 6 2 (R prints vectors in a line rather than as columns to improve readability.)\nSince vectors can only contain elements of a common type, c() will force all elements to be of a single class. In the example below, I create a vector with the number 1, the letter \u0026ldquo;a\u0026rdquo;, today\u0026rsquo;s date, and the value TRUE (a boolean value), but c() coerces all values to be characters:\n1 c(1, \u0026#39;a\u0026#39;, Sys.Date(), TRUE) 1 ## [1] \u0026#34;1\u0026#34; \u0026#34;a\u0026#34; \u0026#34;20185\u0026#34; \u0026#34;TRUE\u0026#34; If we place two vectors (of the same class) side by side, we can create a matrix. Matrices are thus two-dimensional arrays\n1 2 # 2D arrays: matrices matrix(data = 1:8, nrow = 2) 1 2 3 ## [,1] [,2] [,3] [,4] ## [1,] 1 3 5 7 ## [2,] 2 4 6 8 1 matrix(data = 1:8, ncol = 2) 1 2 3 4 5 ## [,1] [,2] ## [1,] 1 5 ## [2,] 2 6 ## [3,] 3 7 ## [4,] 4 8 1 matrix(data = 1:8, ncol = 2, byrow = TRUE) 1 2 3 4 5 ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 ## [3,] 5 6 ## [4,] 7 8 1 2 # matrix operations matrix(1:9, ncol = 3) 1 2 3 4 ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 1 matrix(1:9, ncol = 3) + 3 1 2 3 4 ## [,1] [,2] [,3] ## [1,] 4 7 10 ## [2,] 5 8 11 ## [3,] 6 9 12 1 matrix(1:9, ncol = 3) * 2 # NOT matrix multiplication 1 2 3 4 ## [,1] [,2] [,3] ## [1,] 2 8 14 ## [2,] 4 10 16 ## [3,] 6 12 18 1 matrix(1:9, ncol = 3) %*% 6:8 # matrix multiplication 1 2 3 4 ## [,1] ## [1,] 90 ## [2,] 111 ## [3,] 132 1 matrix(1:9, ncol = 3) %*% matrix(1:6, ncol = 2) 1 2 3 4 ## [,1] [,2] ## [1,] 30 66 ## [2,] 36 81 ## [3,] 42 96 If we want to create an object that has different data types, a matrix or vector won\u0026rsquo;t work because R will force all items to be of the same type.\n1 class(c(0, 2)) 1 ## [1] \u0026#34;numeric\u0026#34; 1 class(c(0, 2, \u0026#39;a\u0026#39;)) # coerces all items to text 1 ## [1] \u0026#34;character\u0026#34; Instead, we need to use a list.\n1 2 3 4 5 # grouping objects with different and types: lists l \u0026lt;- list(letters = c(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;), numbers = 1:10, today = Sys.Date()) l 1 2 3 4 5 6 7 8 ## $letters ## [1] \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; ## ## $numbers ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $today ## [1] \u0026#34;2025-04-07\u0026#34; 1 l$letters 1 ## [1] \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; 1 l$today 1 ## [1] \u0026#34;2025-04-07\u0026#34; If we want a list that has a table-like structure (which will likely be the case for a lot of the data you use in R), we can use a data frame.\n1 2 data.frame(num = 1:10, abc = LETTERS[1:10]) 1 2 3 4 5 6 7 8 9 10 11 ## num abc ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E ## 6 6 F ## 7 7 G ## 8 8 H ## 9 9 I ## 10 10 J 1 2 data.frame(num = 1:5, abc = LETTERS[1:10]) 1 2 3 4 5 6 7 8 9 10 11 ## num abc ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E ## 6 1 F ## 7 2 G ## 8 3 H ## 9 4 I ## 10 5 J 1 2 data.frame(num = 1:10, abc = LETTERS[1:9]) 1 ## Error in data.frame(num = 1:10, abc = LETTERS[1:9]): arguments imply differing number of rows: 10, 9 The tidyverse set of packages provides a \u0026ldquo;fancy data frame\u0026rdquo; that does not recycle elements (unless they are a single value), and allows you to reference other columns you previously created:\n1 2 3 library(\u0026#39;tibble\u0026#39;) tibble(num = 1:10, abc = LETTERS[num]) 1 2 3 4 5 6 7 8 9 10 11 12 13 ## # A tibble: 10 × 2 ## num abc ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E ## 6 6 F ## 7 7 G ## 8 8 H ## 9 9 I ## 10 10 J 1 2 tibble(num = 1:5, abc = LETTERS[1:10]) 1 2 3 4 5 ## Error in `tibble()`: ## ! Tibble columns must have compatible sizes. ## • Size 5: Existing data. ## • Size 10: Column `abc`. ## ℹ Only values of size one are recycled. ","date":"2023-03-07T11:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/data-structures-in-r/","title":"Data Structures in R"},{"content":"Python can be used as a calculator 1 1 + 1 1 ## 2 1 2-3 1 ## -1 1 6 / 2 1 ## 3.0 1 3 * 4 1 ## 12 Since Python is so widely used, there are many people who contribute to continuously improving and developing it. Let\u0026rsquo;s imagine Python as a base version. It can do basic calculations, but it requires extra efforts to do more complicated things. People have created extras or add-ons to help create shortcuts for more complicated specific tasks or functions. These \u0026lsquo;add-ons\u0026rsquo; are called packages. Packages can be imported to use to help make things easier. For example, there is a Python package called math that helps with basic mathematical operations. Let\u0026rsquo;s look at an example here of calling the package using the import command.\n1 2 import math math.sqrt(9) 1 ## 3.0 Once it has been imported, it does not need to be re-imported for the rest of this document. You can also import multiple packages within the same document. We will get into more useful packages later on!\n1 math.log(100) 1 ## 4.605170185988092 For now, practice typing basic calculations into your Python terminal to get used to the syntax, and see how easy it is to calculate things!\n","date":"2023-02-15T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/introduction-to-python/","title":"Introduction to Python"},{"content":" The default color palettes ggplot2 provides are generally good enough for a quick check, but they are overused and do not have very high contrast:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 library(\u0026#39;ggplot2\u0026#39;) # for fancy figures library(\u0026#39;khroma\u0026#39;) # for fancy palettes library(\u0026#39;cowplot\u0026#39;) # for fancy multi-panel figures library(\u0026#39;colorspace\u0026#39;) # required by colorblindr library(\u0026#39;colorblindr\u0026#39;) # to simulate colorblind vision theme_set(theme_bw()) # change default ggplot theme p \u0026lt;- ggplot(mtcars, aes(disp, mpg, color = factor(carb))) + geom_point() + labs(x = \u0026#39;Displacement (cubic inches)\u0026#39;, y = \u0026#39;Miles per gallon (US)\u0026#39;, color = \u0026#39;Carburetors\u0026#39;) p Additionally, they are not colorblind-friendly:\n1 cvd_grid(p) While ggplot2 offers additional color palettes with more contrast, many of them are still not colorblind-friendly:\n1 p + scale_color_brewer(type = \u0026#39;qual\u0026#39;, palette = 6) 1 cvd_grid(p + scale_color_brewer(type = \u0026#39;qual\u0026#39;, palette = 6)) And while the viridis palette (from the viridisLite package and included in the ggplot2 package) can be a good option for continuous palettes, it can still be hard to distinguish between colors in qualitative palettes:\n1 p + scale_color_viridis_d() 1 cvd_grid(p + scale_color_viridis_d()) The khroma package provides multiple high-contrast, colorblind-friendly palettes for qualitative, diverging and sequential data, based on the work of Paul Tol (https://personal.sron.nl/~pault/) and Fabio Crameri (https://www.fabiocrameri.ch/).\n1 p + khroma::scale_color_bright() 1 cvd_grid(p + scale_color_bright()) However, it is best to also use different shapes (in addition to different colors), when possible, to ensure people are able to distinguish between each legend item (which can be difficult with many colors \u0026ndash; compare colors for 3 and 8 for deutan and protan versions, as well as the desaturated version). We can do this by specifying the shape argument. Note that we also need to change the name of the shape legend to ensure we get a single legend:\n1 2 3 4 5 6 p_sh \u0026lt;- ggplot(mtcars, aes(disp, mpg, color = factor(carb))) + geom_point(aes(shape = factor(carb))) + labs(x = \u0026#39;Displacement (cubic inches)\u0026#39;, y = \u0026#39;Miles per gallon (US)\u0026#39;, color = \u0026#39;Carburetors\u0026#39;, shape = \u0026#39;Carburetors\u0026#39;) p_sh 1 cvd_grid(p_sh) Continuous vs discrete khroma color palettes Unlike with the ggplot functions for color palettes, the khroma function names do not specify whether the function will produce a continuous or discrete color palette. To avoid confusion, you can type khroma::scale_color_ and press Tab to see what functions the package offers, and a helpful window should show up beside the function suggestion:\n(If you want to change your RStudio theme, see this tutorial.)\nInstalling the necessary packages To install colorblindr, you will first need to install the cowplot and colorspace packages:\n1 2 3 4 remotes::install_github(\u0026#34;wilkelab/cowplot\u0026#34;) install.packages(\u0026#34;colorspace\u0026#34;, repos = \u0026#34;http://R-Forge.R-project.org\u0026#34;) remotes::install_github(\u0026#34;clauswilke/colorblindr\u0026#34;) install.packages(\u0026#39;khroma\u0026#39;) To read the help files for any of the functions in the packages, use the ? function, e.g. ?scale_color_bright.\n","date":"2023-02-11T10:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/making-colorblind-friendly-figures/","title":"Making Colorblind-Friendly Figures"},{"content":"Color schemes are a matter of preference, but I think many of us can agree that RStudio\u0026rsquo;s default theme is quite bright and low-contrast. Fortunately, RStudio offers some alternative themes, which you can see by clicking on Tools \u0026gt; Global Options in the top ribbon menu in RStudio. You can then select Appearance and change the Editor theme.\nOf the default themes, the Cobalt theme is my preferred one, but I find some of the colors to be too similar (such as the white for general text and the light blue used for headings in R Markdown documents). You can find the custom theme I use on my GitHub page. To add use this theme, go to Tools \u0026gt; Global Options, then select Appearance, and click on Add. Finally, select the Black Rmd.rstheme file, and click on Open.\n","date":"2023-02-11T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/changing-the-rstudio-theme/","title":"Changing the RStudio Theme"},{"content":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932 Including Plots You can also embed plots. See Figure 1 for example:\n1 2 3 4 5 6 7 par(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA ) Figure 1: A fancy pie chart.\n","date":"2020-12-01T21:13:14-05:00","permalink":"http://localhost:4321/csc-blog-new/p/hello-r-markdown/","title":"Hello R Markdown"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"http://localhost:4321/csc-blog-new/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"http://localhost:4321/csc-blog-new/p/placeholder-text/","title":"Placeholder Text"}]