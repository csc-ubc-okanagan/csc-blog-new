[{"content":" It is good practice to have descriptive but concise file names so one can easily find the code they are looking for. But as projects grow, the number of scripts can become quite large (unless you are one of those chaotic people that put everything in a single script\u0026hellip;). With UNIX computers, one can easily search for code in the a file explorer window, but this does not work with Windows. It is possible to search for files by name, but it is not possible to search for specific content in R scripts.\nThe findR package allows Windows users to search for specific strings of code within directories using a simple syntax:\n1 2 3 4 library(\u0026#39;findR\u0026#39;) findRscript(pattern = \u0026#39;a string of code\u0026#39;, path = \u0026#39;my-folder\u0026#39;, case.sensitive = TRUE) The pattern argument can be any code string, but note that single and double quotes need to be escaped by placing a \\ before them (i.e., \\' and \\\u0026quot;), while some special characters need to be preceeded by \\\\, such as +, (. Failing to escape and double-escape special characters will cause the function to miss the files or fail:\n1 findRscript(\u0026#39;library(\\\u0026#39;ctmm\\\u0026#39;)\u0026#39;, path = \u0026#39;H:/GitHub/env-var-review/analysis\u0026#39;) 1 ## No R scripts found! 1 findRscript(\u0026#39;library\\\\(\\\u0026#39;ctmm\\\u0026#39;\\\\)\u0026#39;, path = \u0026#39;H:/GitHub/env-var-review/analysis\u0026#39;) 1 ## No R scripts found! The package can also search for R Markdown files, PDFs, and text (.txt) files via the findRmd(), findPDF(), and findtxt() functions, respectively. Each of the functions can also copy the files that matched the pattern argument to a new folder (if copy = TRUE, but it is FALSE by default). You can decide which folder the files get copied to using the folder argument. Note that by default overwrite is set to TRUE, so any files present with the same name will be overwritten.\n","date":"2023-03-09T18:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/searching-for-files-with-the-findr-package/","title":"Searching for files with the `findR` package"},{"content":"\\usepackage{amsmath}\nThere are many different data structure types in R, each with varying levels of complexity and uses. The simplest data structure in R is a vector. Vectors are one-dimensional arrays (i.e., sets of values) of a single class (such as characters, numbers, dates, etc.), and they have a similar structure to the mathematical concept of vectors. For example, the vector $\\vec v$ with values 1, 4, 6, 2 would be:\n$$\\vec v = \\begin{bmatrix}1 \\\\ 4 \\\\ 6 \\\\ 2\\end{bmatrix}.$$In R we can create vectors using the c() function, as follows:\n1 2 v \u0026lt;- c(1, 4, 6, 2) v 1 ## [1] 1 4 6 2 (R prints vectors in a line rather than as columns to improve readability.)\nSince vectors can only contain elements of a common type, c() will force all elements to be of a single class. In the example below, I create a vector with the number 1, the letter \u0026ldquo;a\u0026rdquo;, today\u0026rsquo;s date, and the value TRUE (a boolean value), but c() coerces all values to be characters:\n1 c(1, \u0026#39;a\u0026#39;, Sys.Date(), TRUE) 1 ## [1] \u0026#34;1\u0026#34; \u0026#34;a\u0026#34; \u0026#34;20185\u0026#34; \u0026#34;TRUE\u0026#34; If we place two vectors (of the same class) side by side, we can create a matrix. Matrices are thus two-dimensional arrays\n1 2 # 2D arrays: matrices matrix(data = 1:8, nrow = 2) 1 2 3 ## [,1] [,2] [,3] [,4] ## [1,] 1 3 5 7 ## [2,] 2 4 6 8 1 matrix(data = 1:8, ncol = 2) 1 2 3 4 5 ## [,1] [,2] ## [1,] 1 5 ## [2,] 2 6 ## [3,] 3 7 ## [4,] 4 8 1 matrix(data = 1:8, ncol = 2, byrow = TRUE) 1 2 3 4 5 ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 ## [3,] 5 6 ## [4,] 7 8 1 2 # matrix operations matrix(1:9, ncol = 3) 1 2 3 4 ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 1 matrix(1:9, ncol = 3) + 3 1 2 3 4 ## [,1] [,2] [,3] ## [1,] 4 7 10 ## [2,] 5 8 11 ## [3,] 6 9 12 1 matrix(1:9, ncol = 3) * 2 # NOT matrix multiplication 1 2 3 4 ## [,1] [,2] [,3] ## [1,] 2 8 14 ## [2,] 4 10 16 ## [3,] 6 12 18 1 matrix(1:9, ncol = 3) %*% 6:8 # matrix multiplication 1 2 3 4 ## [,1] ## [1,] 90 ## [2,] 111 ## [3,] 132 1 matrix(1:9, ncol = 3) %*% matrix(1:6, ncol = 2) 1 2 3 4 ## [,1] [,2] ## [1,] 30 66 ## [2,] 36 81 ## [3,] 42 96 If we want to create an object that has different data types, a matrix or vector won\u0026rsquo;t work because R will force all items to be of the same type.\n1 class(c(0, 2)) 1 ## [1] \u0026#34;numeric\u0026#34; 1 class(c(0, 2, \u0026#39;a\u0026#39;)) # coerces all items to text 1 ## [1] \u0026#34;character\u0026#34; Instead, we need to use a list.\n1 2 3 4 5 # grouping objects with different and types: lists l \u0026lt;- list(letters = c(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;), numbers = 1:10, today = Sys.Date()) l 1 2 3 4 5 6 7 8 ## $letters ## [1] \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; ## ## $numbers ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $today ## [1] \u0026#34;2025-04-07\u0026#34; 1 l$letters 1 ## [1] \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; 1 l$today 1 ## [1] \u0026#34;2025-04-07\u0026#34; If we want a list that has a table-like structure (which will likely be the case for a lot of the data you use in R), we can use a data frame.\n1 2 data.frame(num = 1:10, abc = LETTERS[1:10]) 1 2 3 4 5 6 7 8 9 10 11 ## num abc ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E ## 6 6 F ## 7 7 G ## 8 8 H ## 9 9 I ## 10 10 J 1 2 data.frame(num = 1:5, abc = LETTERS[1:10]) 1 2 3 4 5 6 7 8 9 10 11 ## num abc ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E ## 6 1 F ## 7 2 G ## 8 3 H ## 9 4 I ## 10 5 J 1 2 data.frame(num = 1:10, abc = LETTERS[1:9]) 1 ## Error in data.frame(num = 1:10, abc = LETTERS[1:9]): arguments imply differing number of rows: 10, 9 The tidyverse set of packages provides a \u0026ldquo;fancy data frame\u0026rdquo; that does not recycle elements (unless they are a single value), and allows you to reference other columns you previously created:\n1 2 3 library(\u0026#39;tibble\u0026#39;) tibble(num = 1:10, abc = LETTERS[num]) 1 2 3 4 5 6 7 8 9 10 11 12 13 ## # A tibble: 10 × 2 ## num abc ## \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E ## 6 6 F ## 7 7 G ## 8 8 H ## 9 9 I ## 10 10 J 1 2 tibble(num = 1:5, abc = LETTERS[1:10]) 1 2 3 4 5 ## Error in `tibble()`: ## ! Tibble columns must have compatible sizes. ## • Size 5: Existing data. ## • Size 10: Column `abc`. ## ℹ Only values of size one are recycled. ","date":"2023-03-07T11:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/data-structures-in-r/","title":"Data Structures in R"},{"content":"Python can be used as a calculator 1 1 + 1 1 ## 2 1 2-3 1 ## -1 1 6 / 2 1 ## 3.0 1 3 * 4 1 ## 12 Since Python is so widely used, there are many people who contribute to continuously improving and developing it. Let\u0026rsquo;s imagine Python as a base version. It can do basic calculations, but it requires extra efforts to do more complicated things. People have created extras or add-ons to help create shortcuts for more complicated specific tasks or functions. These \u0026lsquo;add-ons\u0026rsquo; are called packages. Packages can be imported to use to help make things easier. For example, there is a Python package called math that helps with basic mathematical operations. Let\u0026rsquo;s look at an example here of calling the package using the import command.\n1 2 import math math.sqrt(9) 1 ## 3.0 Once it has been imported, it does not need to be re-imported for the rest of this document. You can also import multiple packages within the same document. We will get into more useful packages later on!\n1 math.log(100) 1 ## 4.605170185988092 For now, practice typing basic calculations into your Python terminal to get used to the syntax, and see how easy it is to calculate things!\n","date":"2023-02-15T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/introduction-to-python/","title":"Introduction to Python"},{"content":" The default color palettes ggplot2 provides are generally good enough for a quick check, but they are overused and do not have very high contrast:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 library(\u0026#39;ggplot2\u0026#39;) # for fancy figures library(\u0026#39;khroma\u0026#39;) # for fancy palettes library(\u0026#39;cowplot\u0026#39;) # for fancy multi-panel figures library(\u0026#39;colorspace\u0026#39;) # required by colorblindr library(\u0026#39;colorblindr\u0026#39;) # to simulate colorblind vision theme_set(theme_bw()) # change default ggplot theme p \u0026lt;- ggplot(mtcars, aes(disp, mpg, color = factor(carb))) + geom_point() + labs(x = \u0026#39;Displacement (cubic inches)\u0026#39;, y = \u0026#39;Miles per gallon (US)\u0026#39;, color = \u0026#39;Carburetors\u0026#39;) p Additionally, they are not colorblind-friendly:\n1 cvd_grid(p) While ggplot2 offers additional color palettes with more contrast, many of them are still not colorblind-friendly:\n1 p + scale_color_brewer(type = \u0026#39;qual\u0026#39;, palette = 6) 1 cvd_grid(p + scale_color_brewer(type = \u0026#39;qual\u0026#39;, palette = 6)) And while the viridis palette (from the viridisLite package and included in the ggplot2 package) can be a good option for continuous palettes, it can still be hard to distinguish between colors in qualitative palettes:\n1 p + scale_color_viridis_d() 1 cvd_grid(p + scale_color_viridis_d()) The khroma package provides multiple high-contrast, colorblind-friendly palettes for qualitative, diverging and sequential data, based on the work of Paul Tol (https://personal.sron.nl/~pault/) and Fabio Crameri (https://www.fabiocrameri.ch/).\n1 p + khroma::scale_color_bright() 1 cvd_grid(p + scale_color_bright()) However, it is best to also use different shapes (in addition to different colors), when possible, to ensure people are able to distinguish between each legend item (which can be difficult with many colors \u0026ndash; compare colors for 3 and 8 for deutan and protan versions, as well as the desaturated version). We can do this by specifying the shape argument. Note that we also need to change the name of the shape legend to ensure we get a single legend:\n1 2 3 4 5 6 p_sh \u0026lt;- ggplot(mtcars, aes(disp, mpg, color = factor(carb))) + geom_point(aes(shape = factor(carb))) + labs(x = \u0026#39;Displacement (cubic inches)\u0026#39;, y = \u0026#39;Miles per gallon (US)\u0026#39;, color = \u0026#39;Carburetors\u0026#39;, shape = \u0026#39;Carburetors\u0026#39;) p_sh 1 cvd_grid(p_sh) Continuous vs discrete khroma color palettes Unlike with the ggplot functions for color palettes, the khroma function names do not specify whether the function will produce a continuous or discrete color palette. To avoid confusion, you can type khroma::scale_color_ and press Tab to see what functions the package offers, and a helpful window should show up beside the function suggestion:\n(If you want to change your RStudio theme, see this tutorial.)\nInstalling the necessary packages To install colorblindr, you will first need to install the cowplot and colorspace packages:\n1 2 3 4 remotes::install_github(\u0026#34;wilkelab/cowplot\u0026#34;) install.packages(\u0026#34;colorspace\u0026#34;, repos = \u0026#34;http://R-Forge.R-project.org\u0026#34;) remotes::install_github(\u0026#34;clauswilke/colorblindr\u0026#34;) install.packages(\u0026#39;khroma\u0026#39;) To read the help files for any of the functions in the packages, use the ? function, e.g. ?scale_color_bright.\n","date":"2023-02-11T10:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/making-colorblind-friendly-figures/","title":"Making Colorblind-Friendly Figures"},{"content":"Color schemes are a matter of preference, but I think many of us can agree that RStudio\u0026rsquo;s default theme is quite bright and low-contrast. Fortunately, RStudio offers some alternative themes, which you can see by clicking on Tools \u0026gt; Global Options in the top ribbon menu in RStudio. You can then select Appearance and change the Editor theme.\nOf the default themes, the Cobalt theme is my preferred one, but I find some of the colors to be too similar (such as the white for general text and the light blue used for headings in R Markdown documents). You can find the custom theme I use on my GitHub page. To add use this theme, go to Tools \u0026gt; Global Options, then select Appearance, and click on Add. Finally, select the Black Rmd.rstheme file, and click on Open.\n","date":"2023-02-11T09:00:00-08:00","permalink":"http://localhost:4321/csc-blog-new/p/changing-the-rstudio-theme/","title":"Changing the RStudio Theme"},{"content":"R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932 Including Plots You can also embed plots. See Figure 1 for example:\n1 2 3 4 5 6 7 par(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA ) Figure 1: A fancy pie chart.\n","date":"2020-12-01T21:13:14-05:00","permalink":"http://localhost:4321/csc-blog-new/p/hello-r-markdown/","title":"Hello R Markdown"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"http://localhost:4321/csc-blog-new/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"http://localhost:4321/csc-blog-new/p/placeholder-text/","title":"Placeholder Text"}]